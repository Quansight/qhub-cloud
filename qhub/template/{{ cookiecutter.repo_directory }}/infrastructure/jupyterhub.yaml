{% if cookiecutter.security.authentication.type == 'Auth0' %}
auth:
  type: custom
  custom:
    className: "oauthenticator.auth0.Auth0OAuthenticator"
    config:
      client_id: "{{ cookiecutter.security.authentication.config.client_id }}"
      client_secret: "{{ cookiecutter.security.authentication.config.client_secret }}"
      oauth_callback_url: "{{ cookiecutter.security.authentication.config.oauth_callback_url }}"
      scope: {{ cookiecutter.security.authentication.config.scope | jsonify }}
      auth0_subdomain: "{{ cookiecutter.security.authentication.config.auth0_subdomain }}"
{% elif cookiecutter.security.authentication.type == 'GitHub' %}
auth:
  type: github
  github:
    clientId: "{{ cookiecutter.security.authentication.config.client_id }}"
    clientSecret: "{{ cookiecutter.security.authentication.config.client_secret }}"
    callbackUrl: "{{ cookiecutter.security.authentication.config.oauth_callback_url }}"
{% endif %}

hub:
  allowNamedServers: true
{% if cookiecutter.security.authentication.type == 'Auth0' %}
  extraEnv:
    AUTH0_SUBDOMAIN: "{{ cookiecutter.security.authentication.config.auth0_subdomain }}"
{% endif %}
  extraConfig:
    cds-handlers: |
      from cdsdashboards.hubextension import cds_extra_handlers
      c.JupyterHub.extra_handlers = cds_extra_handlers
    cds-templates: |
      from cdsdashboards.app import CDS_TEMPLATE_PATHS
      c.JupyterHub.template_paths = CDS_TEMPLATE_PATHS
    cds-kube: |
      c.JupyterHub.spawner_class = 'cdsdashboards.hubextension.spawners.variablekube.VariableKubeSpawner'
      c.CDSDashboardsConfig.builder_class = 'cdsdashboards.builder.kubebuilder.KubeBuilder'
    jupyterhub_config: |
{% filter indent(width=6) %}
{% include "templates/jupyterhub_config.py.j2" %}
{% endfilter %}

cull:
  enabled: true
  timeout: 1800 # cull after 30min of inactivity
  every: 600
